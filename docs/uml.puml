@startuml hanging

class Accused {
    - name: std::string
    - gender: int
    - imagePath: std::string
    - reason: std::string
    - witch: int

    + Accused(ng: numGenerator&, ig: imageGenerator&)
    + getName(): std::string
    + getGender(): int
    + getGenderString(): std::string
    + getImagePath(): std::string
    + getReason(): std::string
    + getWitch(): int
    + getWitchString(): std::string
}

class textGenerator {
    - reading: std::vector<std::string>
    
    + textGenerator(filename: const std::string&)
    + readText(): std::string
}

class numGenerator {
    - min: int
    - max: int
    - rng: std::mt19937
    
    + numGenerator(min: int, max: int)
    + generate(): int
}

class imageGenerator {
    - numMenImages: int
    - numWomenImages: int
    
    + imageGenerator()
    + generateImage(gender: int): std::string
}

class Hangman {
    - wordGenerator: Word
    - wordToGuess: std::string
    - guessedWord: std::string
    - incorrectLetters: std::string
    - lives: int
    
    + Hangman(wordsFile: const std::string&)
    + guessLetter(letter: char): bool
    + getGuessedWord(): std::string
    + getIncorrectLetters(): std::string
    + getLives(): int
    + getWordToGuess(): std::string
}

class Word {
    - generator: textGenerator
    
    + Word(filename: const std::string&)
    + generateWord(): std::string
    + getWordLength(word: const std::string&): size_t
}

class GamePrototype {
    - sf::RenderWindow window
    - sf::Font font
    - Hangman game
    - AccusedManager accusedManager
    - numGenerator ng
    - imageGenerator ig
    - sf::Texture texture
    - sf::Sprite accusedSprite
    - sf::Texture backgroundTexture
    - sf::Sprite backgroundSprite
    - sf::Texture benchTexture
    - sf::Sprite benchSprite
    - sf::Texture treeTexture
    - sf::Sprite treeSprite
    - sf::Text nameText
    - sf::Text genderText
    - sf::Text reasonText
    - sf::Text witchText
    - sf::Text guessedWordText
    - sf::Text incorrectLettersText
    - sf::Text livesText
    - sf::Text resultText
    + GamePrototype()
    + run()
    - initialize()
    - loadAssets()
    - setupSprites()
    - setupTexts()
    - resetGame()
    - gameLoop()
    - processEvents()
    - update()
    - render()
    - handleInput(enteredChar: char)
}

enum GameState {
    MAIN_MENU
    ENTER_NAME
    DIFFICULTY_SELECTION
    PLAYING
    EXIT
}

class MenuSystem {
    - std::string playerName
    - GameState currentState
    - std::string difficultyMessage
    + MenuSystem()
    + run()
    - drawMainMenu(window: sf::RenderWindow&, font: sf::Font&)
    - drawEnterNameMenu(window: sf::RenderWindow&, font: sf::Font&)
    - drawDifficultyMenu(window: sf::RenderWindow&, font: sf::Font&)
    - drawPlayingScreen(window: sf::RenderWindow&, font: sf::Font&)
    - handleMainMenuEvent(window: sf::RenderWindow&, event: sf::Event&)
    - handleEnterNameEvent(window: sf::RenderWindow&, event: sf::Event&)
    - handleDifficultyMenuEvent(window: sf::RenderWindow&, event: sf::Event&)
    - handlePlayingEvent(window: sf::RenderWindow&, event: sf::Event&)
}

class AccusedManager {
    - Accused accused
    - numGenerator& ng
    - imageGenerator& ig
    - sf::Font font
    - sf::Text nameText
    - sf::Text genderText
    - sf::Text reasonText
    - sf::Text witchText
    - sf::Sprite accusedSprite
    + AccusedManager(ng: numGenerator&, ig: imageGenerator&)
    + update()
    + render(window: sf::RenderWindow&)
    + getAccused(): Accused&
}

Word "1.." <|-- "1" textGenerator

Hangman "1" --* "1" Word

Accused "1" o-- "1" textGenerator

GamePrototype "1" --|> "1" Hangman
GamePrototype "1" --|> "1" AccusedManager
GamePrototype "1" --|> "1" MenuSystem

MenuSystem "1" --|> "5" GameState

AccusedManager "1" *-- "1.." Accused 
AccusedManager "1" o-- "1" numGenerator 
AccusedManager "1" o-- "1" imageGenerator 

@enduml
